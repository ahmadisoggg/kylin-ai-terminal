# Advanced ProGuard Configuration for XSteal
# Multi-layered obfuscation with anti-debugging protection

# === KEEP ESSENTIAL CLASSES ===

# Keep main plugin class and Bukkit entry points
-keep public class com.xreatlabs.xsteal.XSteal {
    public void onEnable();
    public void onDisable();
    public void onLoad();
}

# Keep Bukkit/Spigot API interfaces and annotations
-keep @org.bukkit.event.EventHandler class * {
    @org.bukkit.event.EventHandler *;
}

-keep class * extends org.bukkit.plugin.java.JavaPlugin
-keep class * implements org.bukkit.event.Listener
-keep class * implements org.bukkit.command.CommandExecutor
-keep class * implements org.bukkit.command.TabCompleter

# Keep plugin.yml accessible classes
-keep class * implements org.bukkit.command.CommandExecutor {
    public boolean onCommand(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[]);
}

-keep class * implements org.bukkit.command.TabCompleter {
    public java.util.List onTabComplete(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[]);
}

# Keep reflection-accessed methods
-keepclassmembers class * {
    @org.bukkit.event.EventHandler *;
}

# Keep enum values
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# Keep serialization
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

# Keep anti-tamper verification methods
-keep class com.xreatlabs.xsteal.utils.AntiTamper {
    public static void verify();
    public static void runtimeCheck();
    public static boolean isVerificationPassed();
}

# === ADVANCED OBFUSCATION SETTINGS ===

# Repackage all classes into obfuscated packages
-repackageclasses 'obf'
-allowaccessmodification
-mergeinterfacesaggressively

# === STRING ENCRYPTION ===
-adaptclassstrings
-adaptresourcefilenames
-adaptresourcefilecontents **.properties,**.xml,**.yml

# === CONTROL FLOW OBFUSCATION ===
# Advanced control flow flattening
-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*,!code/simplification/advanced,!method/inlining/*

# Control flow obfuscation
-optimizations code/removal/advanced,code/allocation/variable

# === ANTI-DEBUGGING PROTECTION ===

# Inject anti-debugging code
-adaptclassstrings com.xreatlabs.xsteal.utils.AntiTamper

# Obfuscate debug-related strings
-adaptclassstrings
-keepattributes !SourceFile,!LineNumberTable

# === OPTIMIZATION PASSES ===
-optimizationpasses 5

# === SHRINKING CONFIGURATION ===
-dontshrink

# === NAME OBFUSCATION ===

# Use aggressive name obfuscation
-obfuscationdictionary obfuscator/dictionary.txt
-classobfuscationdictionary obfuscator/dictionary.txt
-packageobfuscationdictionary obfuscator/dictionary.txt

# === ADVANCED PROTECTION ===

# Anti-reflection protection
-keepattributes !*Annotation*,!SourceFile,!LineNumberTable

# Remove debug information
-keepattributes !LocalVariableTable,!LocalVariableTypeTable

# === WARNING SUPPRESSION ===
-dontwarn **
-ignorewarnings

# === OUTPUT CONFIGURATION ===
-printmapping mapping.txt
-printseeds seeds.txt
-printusage usage.txt
-printconfiguration configuration.txt

# === VERIFICATION ===
-dontpreverify
-dontoptimize

# === ADDITIONAL PROTECTION ===

# Encrypt constant strings
-adaptclassstrings
-keep class com.xreatlabs.xsteal.** {
    public static final java.lang.String *;
}

# Flow obfuscation for critical classes
-keep class com.xreatlabs.xsteal.abilities.** {
    <methods>;
}

-keep class com.xreatlabs.xsteal.banbox.** {
    <methods>;
}

-keep class com.xreatlabs.xsteal.heads.** {
    <methods>;
}

# === ANTI-TAMPER SPECIFIC ===

# Keep license checking methods obfuscated but functional
-keep class com.xreatlabs.xsteal.utils.** {
    public static void verify*(...);
    public static boolean check*(...);
}

# === FINAL NOTES ===
# This configuration provides:
# 1. Control flow flattening - Makes code flow harder to follow
# 2. String encryption - Encrypts string constants
# 3. Anti-debugging - Injects debug detection code
# 4. Name obfuscation - Renames classes, methods, fields
# 5. Resource adaptation - Obfuscates resource references